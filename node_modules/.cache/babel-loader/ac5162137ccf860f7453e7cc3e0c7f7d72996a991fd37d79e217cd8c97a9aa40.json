{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  name: 'OtherConsumptionTable',\n  data() {\n    return {\n      years: ['2021年', '2022年', '2023年', '2024年'],\n      tableData: [{\n        name: '农用塑料薄膜使用量',\n        unit: '千克',\n        values: [37599, 37451, 37306.56, 37306.56]\n      }, {\n        name: '地膜覆盖面积',\n        unit: '亩',\n        values: [9283, 9264, 9245.48, 9245.48]\n      }, {\n        name: '农用柴油使用量',\n        unit: '千克',\n        values: [74873, 75137, 75396.60, 75396.60]\n      }, {\n        name: '农药使用量',\n        unit: '千克',\n        values: [22854, 22831, 22808.56, 0]\n      }],\n      colors: ['#43aa8b', '#90be6d', '#f9c74f', '#f3722c'],\n      maxValue: 0,\n      displayMode: 'normal' // 'normal' or 'compact'\n    };\n  },\n  created() {\n    // 计算所有数据中的最大值\n    this.maxValue = this.getOverallMaxValue();\n\n    // 检测屏幕宽度，设置显示模式\n    this.setDisplayMode();\n    window.addEventListener('resize', this.setDisplayMode);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.setDisplayMode);\n  },\n  methods: {\n    formatNumber(num) {\n      return num.toLocaleString('zh-CN', {\n        minimumFractionDigits: num % 1 === 0 ? 0 : 2,\n        maximumFractionDigits: 2\n      });\n    },\n    // 简化大数字显示\n    formatValueDisplay(value) {\n      if (this.displayMode === 'compact' && value >= 10000) {\n        return (value / 10000).toFixed(1) + '万';\n      } else if (this.displayMode === 'compact' && value >= 1000) {\n        return (value / 1000).toFixed(1) + '千';\n      }\n      return this.formatNumber(value);\n    },\n    getOverallMaxValue() {\n      let max = 0;\n      this.tableData.forEach(item => {\n        const rowMax = Math.max(...item.values);\n        if (rowMax > max) {\n          max = rowMax;\n        }\n      });\n      return max;\n    },\n    getBarWidth(value) {\n      // 使用整个表格的最大值作为基准\n      const percentage = value / this.maxValue * 100;\n      return `${Math.max(percentage, 3)}%`;\n    },\n    getBarColor(index) {\n      return this.colors[index % this.colors.length];\n    },\n    setDisplayMode() {\n      // 根据屏幕宽度决定是否使用紧凑显示模式\n      this.displayMode = window.innerWidth < 1200 ? 'compact' : 'normal';\n    }\n  }\n};","map":{"version":3,"names":["name","data","years","tableData","unit","values","colors","maxValue","displayMode","created","getOverallMaxValue","setDisplayMode","window","addEventListener","beforeDestroy","removeEventListener","methods","formatNumber","num","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatValueDisplay","value","toFixed","max","forEach","item","rowMax","Math","getBarWidth","percentage","getBarColor","index","length","innerWidth"],"sources":["src/components/tables/OtherConsumptionTable.vue"],"sourcesContent":["<template>\r\n  <div class=\"table-wrapper\">\r\n    <div class=\"table-header\">农业生产消耗表</div>\r\n    <div class=\"table-scroll-container\">\r\n      <table class=\"consumption-table\">\r\n        <thead>\r\n          <tr>\r\n            <th class=\"item-col\">项目</th>\r\n            <th class=\"unit-col\">单位</th>\r\n            <th v-for=\"year in years\" :key=\"year\" class=\"year-col\">{{ year }}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"(item, index) in tableData\" :key=\"index\">\r\n            <td class=\"item-name\">{{ item.name }}</td>\r\n            <td class=\"unit\">{{ item.unit }}</td>\r\n            <td v-for=\"(value, yearIndex) in item.values\" :key=\"yearIndex\" class=\"value-cell\">\r\n              <div class=\"value-content\">\r\n                <div \r\n                  class=\"value-bar\" \r\n                  :style=\"{ \r\n                    width: getBarWidth(value), \r\n                    backgroundColor: getBarColor(index)\r\n                  }\"\r\n                ></div>\r\n                <span class=\"value-text\">{{ formatValueDisplay(value) }}</span>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'OtherConsumptionTable',\r\n  data() {\r\n    return {\r\n      years: ['2021年', '2022年', '2023年', '2024年'],\r\n      tableData: [\r\n        {\r\n          name: '农用塑料薄膜使用量',\r\n          unit: '千克',\r\n          values: [37599, 37451, 37306.56, 37306.56]\r\n        },\r\n        {\r\n          name: '地膜覆盖面积',\r\n          unit: '亩',\r\n          values: [9283, 9264, 9245.48, 9245.48]\r\n        },\r\n        {\r\n          name: '农用柴油使用量',\r\n          unit: '千克',\r\n          values: [74873, 75137, 75396.60, 75396.60]\r\n        },\r\n        {\r\n          name: '农药使用量',\r\n          unit: '千克',\r\n          values: [22854, 22831, 22808.56, 0]\r\n        }\r\n      ],\r\n      colors: ['#43aa8b', '#90be6d', '#f9c74f', '#f3722c'],\r\n      maxValue: 0,\r\n      displayMode: 'normal' // 'normal' or 'compact'\r\n    };\r\n  },\r\n  created() {\r\n    // 计算所有数据中的最大值\r\n    this.maxValue = this.getOverallMaxValue();\r\n    \r\n    // 检测屏幕宽度，设置显示模式\r\n    this.setDisplayMode();\r\n    window.addEventListener('resize', this.setDisplayMode);\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.setDisplayMode);\r\n  },\r\n  methods: {\r\n    formatNumber(num) {\r\n      return num.toLocaleString('zh-CN', {\r\n        minimumFractionDigits: num % 1 === 0 ? 0 : 2,\r\n        maximumFractionDigits: 2\r\n      });\r\n    },\r\n    // 简化大数字显示\r\n    formatValueDisplay(value) {\r\n      if (this.displayMode === 'compact' && value >= 10000) {\r\n        return (value / 10000).toFixed(1) + '万';\r\n      } else if (this.displayMode === 'compact' && value >= 1000) {\r\n        return (value / 1000).toFixed(1) + '千';\r\n      }\r\n      return this.formatNumber(value);\r\n    },\r\n    getOverallMaxValue() {\r\n      let max = 0;\r\n      this.tableData.forEach(item => {\r\n        const rowMax = Math.max(...item.values);\r\n        if (rowMax > max) {\r\n          max = rowMax;\r\n        }\r\n      });\r\n      return max;\r\n    },\r\n    getBarWidth(value) {\r\n      // 使用整个表格的最大值作为基准\r\n      const percentage = (value / this.maxValue) * 100;\r\n      return `${Math.max(percentage, 3)}%`;\r\n    },\r\n    getBarColor(index) {\r\n      return this.colors[index % this.colors.length];\r\n    },\r\n    setDisplayMode() {\r\n      // 根据屏幕宽度决定是否使用紧凑显示模式\r\n      this.displayMode = window.innerWidth < 1200 ? 'compact' : 'normal';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.table-wrapper {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 5px;\r\n  box-sizing: border-box;\r\n  /* 确保表格在所有屏幕尺寸都有合适高度 */\r\n  min-height: 280px;\r\n}\r\n\r\n.table-header {\r\n  font-size: 14px;\r\n  color: #f9c74f;\r\n  text-align: center;\r\n  margin-bottom: 8px;\r\n  font-weight: bold;\r\n}\r\n\r\n.table-scroll-container {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  min-height: 230px; /* 确保表格高度足够显示内容 */\r\n  max-height: 100%; /* 限制最大高度为容器的100% */\r\n  /* 自定义滚动条样式 */\r\n  scrollbar-width: thin;\r\n  scrollbar-color: rgba(255, 255, 255, 0.2) transparent;\r\n}\r\n\r\n.table-scroll-container::-webkit-scrollbar {\r\n  width: 4px;\r\n}\r\n\r\n.table-scroll-container::-webkit-scrollbar-track {\r\n  background: transparent;\r\n}\r\n\r\n.table-scroll-container::-webkit-scrollbar-thumb {\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  border-radius: 3px;\r\n}\r\n\r\n.consumption-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  color: #fff;\r\n  font-size: 14px;\r\n  table-layout: fixed; /* 提高表格渲染性能 */\r\n}\r\n\r\n.consumption-table th {\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  padding: 8px 10px;\r\n  text-align: center; /* 居中显示表头 */\r\n  font-weight: bold;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 1;\r\n}\r\n\r\n.consumption-table td {\r\n  padding: 10px 12px;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.05);\r\n}\r\n\r\n.consumption-table tbody tr:hover {\r\n  background-color: rgba(255, 255, 255, 0.05);\r\n}\r\n\r\n.item-col {\r\n  width: 25%;\r\n}\r\n\r\n.unit-col {\r\n  width: 10%;\r\n}\r\n\r\n.year-col {\r\n  width: 16.25%; /* 平均分配剩余宽度给四个年份列 */\r\n}\r\n\r\n.item-name {\r\n  font-weight: 500;\r\n  color: rgba(255, 255, 255, 0.9);\r\n}\r\n\r\n.unit {\r\n  color: rgba(255, 255, 255, 0.6);\r\n  text-align: center;\r\n}\r\n\r\n.value-cell {\r\n  padding: 8px 10px !important;\r\n  text-align: right; /* 右对齐数字 */\r\n}\r\n\r\n.value-content {\r\n  position: relative;\r\n  height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end; /* 右对齐内容 */\r\n}\r\n\r\n.value-bar {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  height: 100%;\r\n  border-radius: 2px;\r\n  opacity: 0.3;\r\n  z-index: 0;\r\n  transition: width 0.5s ease;\r\n}\r\n\r\n.value-text {\r\n  position: relative;\r\n  z-index: 1;\r\n  padding-left: 4px;\r\n  letter-spacing: -0.5px; /* 稍微减少字符间距 */\r\n  font-variant-numeric: tabular-nums; /* 等宽数字，提高对齐性 */\r\n}\r\n\r\n@media screen and (max-width: 1200px) {\r\n  .table-wrapper {\r\n    min-height: 250px;\r\n  }\r\n  \r\n  .consumption-table {\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .value-text {\r\n    letter-spacing: -0.8px; /* 进一步减少字符间距 */\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 992px) {\r\n  .table-wrapper {\r\n    min-height: 240px;\r\n  }\r\n  \r\n  .consumption-table {\r\n    font-size: 12px;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n  .consumption-table {\r\n    font-size: 11px;\r\n  }\r\n  \r\n  .consumption-table th,\r\n  .consumption-table td {\r\n    padding: 6px 4px;\r\n  }\r\n  \r\n  .value-content {\r\n    height: 20px;\r\n  }\r\n  \r\n  .table-wrapper {\r\n    min-height: 220px;\r\n  }\r\n  \r\n  .table-scroll-container {\r\n    min-height: 180px;\r\n  }\r\n  \r\n  .table-header {\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .value-cell {\r\n    padding: 6px 4px !important;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 480px) {\r\n  .consumption-table {\r\n    font-size: 10px;\r\n  }\r\n  \r\n  .consumption-table th,\r\n  .consumption-table td {\r\n    padding: 5px 3px;\r\n  }\r\n  \r\n  .table-wrapper {\r\n    min-height: 200px;\r\n  }\r\n  \r\n  .table-scroll-container {\r\n    min-height: 160px;\r\n  }\r\n  \r\n  .table-header {\r\n    font-size: 12px;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  .item-col {\r\n    width: 20%;\r\n  }\r\n  \r\n  .unit-col {\r\n    width: 8%;\r\n  }\r\n  \r\n  .year-col {\r\n    width: 18%;\r\n  }\r\n}\r\n</style> "],"mappings":";;AAoCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,SAAA,GACA;QACAH,IAAA;QACAI,IAAA;QACAC,MAAA;MACA,GACA;QACAL,IAAA;QACAI,IAAA;QACAC,MAAA;MACA,GACA;QACAL,IAAA;QACAI,IAAA;QACAC,MAAA;MACA,GACA;QACAL,IAAA;QACAI,IAAA;QACAC,MAAA;MACA,EACA;MACAC,MAAA;MACAC,QAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAF,QAAA,QAAAG,kBAAA;;IAEA;IACA,KAAAC,cAAA;IACAC,MAAA,CAAAC,gBAAA,gBAAAF,cAAA;EACA;EACAG,cAAA;IACAF,MAAA,CAAAG,mBAAA,gBAAAJ,cAAA;EACA;EACAK,OAAA;IACAC,aAAAC,GAAA;MACA,OAAAA,GAAA,CAAAC,cAAA;QACAC,qBAAA,EAAAF,GAAA;QACAG,qBAAA;MACA;IACA;IACA;IACAC,mBAAAC,KAAA;MACA,SAAAf,WAAA,kBAAAe,KAAA;QACA,QAAAA,KAAA,UAAAC,OAAA;MACA,gBAAAhB,WAAA,kBAAAe,KAAA;QACA,QAAAA,KAAA,SAAAC,OAAA;MACA;MACA,YAAAP,YAAA,CAAAM,KAAA;IACA;IACAb,mBAAA;MACA,IAAAe,GAAA;MACA,KAAAtB,SAAA,CAAAuB,OAAA,CAAAC,IAAA;QACA,MAAAC,MAAA,GAAAC,IAAA,CAAAJ,GAAA,IAAAE,IAAA,CAAAtB,MAAA;QACA,IAAAuB,MAAA,GAAAH,GAAA;UACAA,GAAA,GAAAG,MAAA;QACA;MACA;MACA,OAAAH,GAAA;IACA;IACAK,YAAAP,KAAA;MACA;MACA,MAAAQ,UAAA,GAAAR,KAAA,QAAAhB,QAAA;MACA,UAAAsB,IAAA,CAAAJ,GAAA,CAAAM,UAAA;IACA;IACAC,YAAAC,KAAA;MACA,YAAA3B,MAAA,CAAA2B,KAAA,QAAA3B,MAAA,CAAA4B,MAAA;IACA;IACAvB,eAAA;MACA;MACA,KAAAH,WAAA,GAAAI,MAAA,CAAAuB,UAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}