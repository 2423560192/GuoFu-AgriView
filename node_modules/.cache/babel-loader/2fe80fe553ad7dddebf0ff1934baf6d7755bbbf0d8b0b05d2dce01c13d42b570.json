{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { economicCropsData } from '../../data/agricultural-data.js';\nexport default {\n  name: 'RegionMap',\n  data() {\n    return {\n      chart: null,\n      loading: true\n    };\n  },\n  mounted() {\n    // 模拟加载延迟\n    setTimeout(() => {\n      this.loading = false;\n      this.$nextTick(() => {\n        this.initChart();\n      });\n    }, 800);\n    window.addEventListener('resize', this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  },\n  methods: {\n    initChart() {\n      this.chart = this.$echarts.init(this.$refs.chart);\n      const option = {\n        backgroundColor: 'transparent',\n        tooltip: {\n          trigger: 'item',\n          formatter: '{b}<br/>面积: {c}亩',\n          backgroundColor: 'rgba(0, 0, 0, 0.7)',\n          borderColor: 'rgba(76, 213, 206, 0.3)',\n          borderWidth: 1,\n          textStyle: {\n            color: '#fff'\n          }\n        },\n        visualMap: {\n          min: 0,\n          max: 5000,\n          text: ['高', '低'],\n          realtime: false,\n          calculable: true,\n          inRange: {\n            color: ['#43aa8b', '#4cd5ce', '#277da1']\n          },\n          textStyle: {\n            color: '#fff'\n          },\n          left: 'left',\n          bottom: 10\n        },\n        series: [{\n          name: '郭扶镇',\n          type: 'map',\n          map: 'guofu',\n          roam: true,\n          zoom: 1,\n          center: [100, 100],\n          aspectScale: 1,\n          selectedMode: false,\n          label: {\n            show: true,\n            color: '#fff',\n            fontSize: 12,\n            fontWeight: 'bold',\n            textShadow: [2, 2, 5, 'rgba(0, 0, 0, 0.8)']\n          },\n          itemStyle: {\n            areaColor: '#43aa8b',\n            borderColor: 'rgba(255, 255, 255, 0.5)',\n            borderWidth: 1\n          },\n          emphasis: {\n            label: {\n              show: true,\n              color: '#fff',\n              fontSize: 14,\n              fontWeight: 'bold'\n            },\n            itemStyle: {\n              areaColor: '#f9c74f',\n              borderColor: '#fff',\n              borderWidth: 2,\n              shadowColor: 'rgba(0, 0, 0, 0.5)',\n              shadowBlur: 10\n            }\n          },\n          data: economicCropsData.villageData2024.map(item => ({\n            name: item.village,\n            value: item.area\n          }))\n        }],\n        animation: true,\n        animationDuration: 1000,\n        animationEasing: 'cubicOut'\n      };\n      const radius = 80;\n      const centerOffset = 120;\n      this.$echarts.registerMap('guofu', {\n        type: 'FeatureCollection',\n        features: economicCropsData.villageData2024.map((item, index) => {\n          const angle = index * Math.PI * 2 / economicCropsData.villageData2024.length;\n          const centerX = Math.cos(angle) * radius + centerOffset;\n          const centerY = Math.sin(angle) * radius + centerOffset;\n          return {\n            type: 'Feature',\n            properties: {\n              name: item.village\n            },\n            geometry: {\n              type: 'Polygon',\n              coordinates: [this.createPolygon(centerX, centerY, 25 + Math.random() * 15)]\n            }\n          };\n        })\n      });\n      this.chart.setOption(option);\n    },\n    createPolygon(centerX, centerY, radius) {\n      const points = [];\n      const count = 6 + Math.floor(Math.random() * 3);\n      for (let i = 0; i < count; i++) {\n        const angle = i / count * Math.PI * 2;\n        const r = radius * (0.85 + Math.random() * 0.3);\n        points.push([centerX + Math.cos(angle) * r, centerY + Math.sin(angle) * r]);\n      }\n      points.push([...points[0]]);\n      return points;\n    },\n    handleResize() {\n      if (this.chart) {\n        this.chart.resize();\n      }\n    }\n  }\n};","map":{"version":3,"names":["economicCropsData","name","data","chart","loading","mounted","setTimeout","$nextTick","initChart","window","addEventListener","handleResize","beforeDestroy","removeEventListener","dispose","methods","$echarts","init","$refs","option","backgroundColor","tooltip","trigger","formatter","borderColor","borderWidth","textStyle","color","visualMap","min","max","text","realtime","calculable","inRange","left","bottom","series","type","map","roam","zoom","center","aspectScale","selectedMode","label","show","fontSize","fontWeight","textShadow","itemStyle","areaColor","emphasis","shadowColor","shadowBlur","villageData2024","item","village","value","area","animation","animationDuration","animationEasing","radius","centerOffset","registerMap","features","index","angle","Math","PI","length","centerX","cos","centerY","sin","properties","geometry","coordinates","createPolygon","random","setOption","points","count","floor","i","r","push","resize"],"sources":["src/components/charts/RegionMap.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-wrapper\">\r\n    <div class=\"chart-title\">郭扶镇行政区划图</div>\r\n    <div class=\"chart-loading\" v-if=\"loading\">\r\n      <div class=\"loading-spinner\"></div>\r\n      <div>加载中...</div>\r\n    </div>\r\n    <div ref=\"chart\" class=\"chart\" :class=\"{ 'is-loading': loading }\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { economicCropsData } from '../../data/agricultural-data.js'\r\n\r\nexport default {\r\n  name: 'RegionMap',\r\n  data() {\r\n    return {\r\n      chart: null,\r\n      loading: true\r\n    }\r\n  },\r\n  mounted() {\r\n    // 模拟加载延迟\r\n    setTimeout(() => {\r\n      this.loading = false\r\n      this.$nextTick(() => {\r\n        this.initChart()\r\n      })\r\n    }, 800)\r\n    \r\n    window.addEventListener('resize', this.handleResize)\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.handleResize)\r\n    if (this.chart) {\r\n      this.chart.dispose()\r\n    }\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      this.chart = this.$echarts.init(this.$refs.chart)\r\n      \r\n      const option = {\r\n        backgroundColor: 'transparent',\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: '{b}<br/>面积: {c}亩',\r\n          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n          borderColor: 'rgba(76, 213, 206, 0.3)',\r\n          borderWidth: 1,\r\n          textStyle: {\r\n            color: '#fff'\r\n          }\r\n        },\r\n        visualMap: {\r\n          min: 0,\r\n          max: 5000,\r\n          text: ['高', '低'],\r\n          realtime: false,\r\n          calculable: true,\r\n          inRange: {\r\n            color: ['#43aa8b', '#4cd5ce', '#277da1']\r\n          },\r\n          textStyle: {\r\n            color: '#fff'\r\n          },\r\n          left: 'left',\r\n          bottom: 10\r\n        },\r\n        series: [\r\n          {\r\n            name: '郭扶镇',\r\n            type: 'map',\r\n            map: 'guofu',\r\n            roam: true,\r\n            zoom: 1,\r\n            center: [100, 100],\r\n            aspectScale: 1,\r\n            selectedMode: false,\r\n            label: {\r\n              show: true,\r\n              color: '#fff',\r\n              fontSize: 12,\r\n              fontWeight: 'bold',\r\n              textShadow: [2, 2, 5, 'rgba(0, 0, 0, 0.8)']\r\n            },\r\n            itemStyle: {\r\n              areaColor: '#43aa8b',\r\n              borderColor: 'rgba(255, 255, 255, 0.5)',\r\n              borderWidth: 1\r\n            },\r\n            emphasis: {\r\n              label: {\r\n                show: true,\r\n                color: '#fff',\r\n                fontSize: 14,\r\n                fontWeight: 'bold'\r\n              },\r\n              itemStyle: {\r\n                areaColor: '#f9c74f',\r\n                borderColor: '#fff',\r\n                borderWidth: 2,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)',\r\n                shadowBlur: 10\r\n              }\r\n            },\r\n            data: economicCropsData.villageData2024.map(item => ({\r\n              name: item.village,\r\n              value: item.area\r\n            }))\r\n          }\r\n        ],\r\n        animation: true,\r\n        animationDuration: 1000,\r\n        animationEasing: 'cubicOut'\r\n      }\r\n      \r\n      const radius = 80\r\n      const centerOffset = 120\r\n      this.$echarts.registerMap('guofu', {\r\n        type: 'FeatureCollection',\r\n        features: economicCropsData.villageData2024.map((item, index) => {\r\n          const angle = (index * Math.PI * 2) / economicCropsData.villageData2024.length\r\n          const centerX = Math.cos(angle) * radius + centerOffset\r\n          const centerY = Math.sin(angle) * radius + centerOffset\r\n          \r\n          return {\r\n            type: 'Feature',\r\n            properties: { name: item.village },\r\n            geometry: {\r\n              type: 'Polygon',\r\n              coordinates: [this.createPolygon(centerX, centerY, 25 + Math.random() * 15)]\r\n            }\r\n          }\r\n        })\r\n      })\r\n      \r\n      this.chart.setOption(option)\r\n    },\r\n    createPolygon(centerX, centerY, radius) {\r\n      const points = []\r\n      const count = 6 + Math.floor(Math.random() * 3)\r\n      \r\n      for (let i = 0; i < count; i++) {\r\n        const angle = (i / count) * Math.PI * 2\r\n        const r = radius * (0.85 + Math.random() * 0.3)\r\n        points.push([\r\n          centerX + Math.cos(angle) * r,\r\n          centerY + Math.sin(angle) * r\r\n        ])\r\n      }\r\n      \r\n      points.push([...points[0]])\r\n      return points\r\n    },\r\n    handleResize() {\r\n      if (this.chart) {\r\n        this.chart.resize()\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 16px;\r\n  color: #fff;\r\n  text-align: center;\r\n  padding: 10px 0;\r\n  text-shadow: 0 0 5px rgba(76, 213, 206, 0.5);\r\n}\r\n\r\n.chart {\r\n  flex: 1;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.chart.is-loading {\r\n  opacity: 0;\r\n}\r\n\r\n.chart-loading {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: rgba(0, 0, 0, 0.2);\r\n  color: rgba(255, 255, 255, 0.7);\r\n  font-size: 14px;\r\n  z-index: 10;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 3px solid rgba(76, 213, 206, 0.3);\r\n  border-radius: 50%;\r\n  border-top-color: #4cd5ce;\r\n  animation: spin 1s ease-in-out infinite;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n@keyframes spin {\r\n  to { transform: rotate(360deg); }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}