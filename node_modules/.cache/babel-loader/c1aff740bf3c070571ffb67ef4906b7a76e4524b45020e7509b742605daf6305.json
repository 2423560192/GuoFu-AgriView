{"ast":null,"code":"import { grainProductionData } from '../../data/agricultural-data.js';\nexport default {\n  name: 'GrainPyramid',\n  data() {\n    return {\n      chart: null,\n      currentYear: '2024',\n      years: ['2024', '2023', '2022', '2021'],\n      pyramidData: {\n        '2024': grainProductionData.distribution2024,\n        '2023': grainProductionData.distribution2023,\n        '2022': grainProductionData.distribution2022,\n        '2021': grainProductionData.distribution2021\n      }\n    };\n  },\n  mounted() {\n    this.initChart();\n    window.addEventListener('resize', this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  },\n  watch: {\n    currentYear() {\n      this.updateChart();\n    }\n  },\n  methods: {\n    initChart() {\n      this.chart = this.$echarts.init(this.$refs.chart);\n      this.updateChart();\n    },\n    updateChart() {\n      // 获取当前年份的数据\n      const data = this.pyramidData[this.currentYear];\n      const option = {\n        title: {\n          text: `${this.currentYear}年粮食作物面积占比`,\n          textStyle: {\n            color: '#fff',\n            fontSize: 14\n          },\n          left: 'center',\n          top: 5\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{b}: {c}%',\n          backgroundColor: 'rgba(0, 0, 0, 0.7)',\n          borderColor: 'rgba(255, 255, 255, 0.2)',\n          textStyle: {\n            color: '#fff'\n          }\n        },\n        series: [{\n          name: '面积占比',\n          type: 'funnel',\n          width: '80%',\n          height: '80%',\n          left: '10%',\n          top: '15%',\n          minSize: '0%',\n          maxSize: '100%',\n          sort: 'none',\n          gap: 2,\n          label: {\n            show: true,\n            position: 'inside',\n            formatter: '{b} {c}%',\n            fontSize: 14,\n            fontWeight: 'bold',\n            color: '#fff'\n          },\n          itemStyle: {\n            borderColor: 'rgba(255, 255, 255, 0.5)',\n            borderWidth: 1\n          },\n          emphasis: {\n            label: {\n              fontSize: 16\n            },\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          },\n          data: data\n        }],\n        color: ['#f9c74f', '#90be6d', '#43aa8b']\n      };\n      this.chart.setOption(option, true);\n    },\n    handleResize() {\n      if (this.chart) {\n        this.chart.resize();\n\n        // 响应式调整\n        const containerWidth = this.$refs.chart.clientWidth;\n        if (containerWidth < 300) {\n          this.chart.setOption({\n            series: [{\n              width: '90%',\n              left: '5%',\n              label: {\n                fontSize: 12\n              }\n            }]\n          });\n        } else {\n          this.chart.setOption({\n            series: [{\n              width: '80%',\n              left: '10%',\n              label: {\n                fontSize: 14\n              }\n            }]\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["grainProductionData","name","data","chart","currentYear","years","pyramidData","distribution2024","distribution2023","distribution2022","distribution2021","mounted","initChart","window","addEventListener","handleResize","beforeDestroy","removeEventListener","dispose","watch","updateChart","methods","$echarts","init","$refs","option","title","text","textStyle","color","fontSize","left","top","tooltip","trigger","formatter","backgroundColor","borderColor","series","type","width","height","minSize","maxSize","sort","gap","label","show","position","fontWeight","itemStyle","borderWidth","emphasis","shadowBlur","shadowOffsetX","shadowColor","setOption","resize","containerWidth","clientWidth"],"sources":["src/components/charts/GrainPyramid.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-wrapper\">\r\n    <div class=\"year-tabs\">\r\n      <div \r\n        v-for=\"year in years\" \r\n        :key=\"year\" \r\n        :class=\"['year-tab', { active: currentYear === year }]\" \r\n        @click=\"currentYear = year\"\r\n      >\r\n        {{ year }}年\r\n      </div>\r\n    </div>\r\n    <div ref=\"chart\" class=\"chart\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { grainProductionData } from '../../data/agricultural-data.js'\r\n\r\nexport default {\r\n  name: 'GrainPyramid',\r\n  data() {\r\n    return {\r\n      chart: null,\r\n      currentYear: '2024',\r\n      years: ['2024', '2023', '2022', '2021'],\r\n      pyramidData: {\r\n        '2024': grainProductionData.distribution2024,\r\n        '2023': grainProductionData.distribution2023,\r\n        '2022': grainProductionData.distribution2022,\r\n        '2021': grainProductionData.distribution2021\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initChart()\r\n    window.addEventListener('resize', this.handleResize)\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.handleResize)\r\n    if (this.chart) {\r\n      this.chart.dispose()\r\n    }\r\n  },\r\n  watch: {\r\n    currentYear() {\r\n      this.updateChart()\r\n    }\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      this.chart = this.$echarts.init(this.$refs.chart)\r\n      this.updateChart()\r\n    },\r\n    updateChart() {\r\n      // 获取当前年份的数据\r\n      const data = this.pyramidData[this.currentYear]\r\n      \r\n      const option = {\r\n        title: {\r\n          text: `${this.currentYear}年粮食作物面积占比`,\r\n          textStyle: {\r\n            color: '#fff',\r\n            fontSize: 14\r\n          },\r\n          left: 'center',\r\n          top: 5\r\n        },\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: '{b}: {c}%',\r\n          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n          borderColor: 'rgba(255, 255, 255, 0.2)',\r\n          textStyle: {\r\n            color: '#fff'\r\n          }\r\n        },\r\n        series: [\r\n          {\r\n            name: '面积占比',\r\n            type: 'funnel',\r\n            width: '80%',\r\n            height: '80%',\r\n            left: '10%',\r\n            top: '15%',\r\n            minSize: '0%',\r\n            maxSize: '100%',\r\n            sort: 'none',\r\n            gap: 2,\r\n            label: {\r\n              show: true,\r\n              position: 'inside',\r\n              formatter: '{b} {c}%',\r\n              fontSize: 14,\r\n              fontWeight: 'bold',\r\n              color: '#fff'\r\n            },\r\n            itemStyle: {\r\n              borderColor: 'rgba(255, 255, 255, 0.5)',\r\n              borderWidth: 1\r\n            },\r\n            emphasis: {\r\n              label: {\r\n                fontSize: 16\r\n              },\r\n              itemStyle: {\r\n                shadowBlur: 10,\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            },\r\n            data: data\r\n          }\r\n        ],\r\n        color: ['#f9c74f', '#90be6d', '#43aa8b']\r\n      }\r\n      \r\n      this.chart.setOption(option, true)\r\n    },\r\n    handleResize() {\r\n      if (this.chart) {\r\n        this.chart.resize()\r\n        \r\n        // 响应式调整\r\n        const containerWidth = this.$refs.chart.clientWidth\r\n        if (containerWidth < 300) {\r\n          this.chart.setOption({\r\n            series: [{\r\n              width: '90%',\r\n              left: '5%',\r\n              label: {\r\n                fontSize: 12\r\n              }\r\n            }]\r\n          })\r\n        } else {\r\n          this.chart.setOption({\r\n            series: [{\r\n              width: '80%',\r\n              left: '10%',\r\n              label: {\r\n                fontSize: 14\r\n              }\r\n            }]\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0 5px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.year-tabs {\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  margin-bottom: 5px;\r\n  margin-top: 5px;\r\n}\r\n\r\n.year-tab {\r\n  padding: 4px 8px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n  color: rgba(255, 255, 255, 0.7);\r\n  border-radius: 4px;\r\n  margin: 2px;\r\n  transition: all 0.3s ease;\r\n  border: 1px solid transparent;\r\n}\r\n\r\n.year-tab:hover {\r\n  color: #fff;\r\n  background: rgba(76, 213, 206, 0.1);\r\n}\r\n\r\n.year-tab.active {\r\n  color: #4cd5ce;\r\n  font-weight: bold;\r\n  border: 1px solid rgba(76, 213, 206, 0.5);\r\n}\r\n\r\n.chart {\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n@media screen and (max-width: 480px) {\r\n  .year-tab {\r\n    padding: 3px 6px;\r\n    font-size: 10px;\r\n    margin: 1px;\r\n  }\r\n  \r\n  .chart-wrapper {\r\n    padding: 0 3px;\r\n  }\r\n}\r\n</style> "],"mappings":"AAiBA,SAAAA,mBAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,WAAA;MACAC,KAAA;MACAC,WAAA;QACA,QAAAN,mBAAA,CAAAO,gBAAA;QACA,QAAAP,mBAAA,CAAAQ,gBAAA;QACA,QAAAR,mBAAA,CAAAS,gBAAA;QACA,QAAAT,mBAAA,CAAAU;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;IACAC,MAAA,CAAAC,gBAAA,gBAAAC,YAAA;EACA;EACAC,cAAA;IACAH,MAAA,CAAAI,mBAAA,gBAAAF,YAAA;IACA,SAAAZ,KAAA;MACA,KAAAA,KAAA,CAAAe,OAAA;IACA;EACA;EACAC,KAAA;IACAf,YAAA;MACA,KAAAgB,WAAA;IACA;EACA;EACAC,OAAA;IACAT,UAAA;MACA,KAAAT,KAAA,QAAAmB,QAAA,CAAAC,IAAA,MAAAC,KAAA,CAAArB,KAAA;MACA,KAAAiB,WAAA;IACA;IACAA,YAAA;MACA;MACA,MAAAlB,IAAA,QAAAI,WAAA,MAAAF,WAAA;MAEA,MAAAqB,MAAA;QACAC,KAAA;UACAC,IAAA,UAAAvB,WAAA;UACAwB,SAAA;YACAC,KAAA;YACAC,QAAA;UACA;UACAC,IAAA;UACAC,GAAA;QACA;QACAC,OAAA;UACAC,OAAA;UACAC,SAAA;UACAC,eAAA;UACAC,WAAA;UACAT,SAAA;YACAC,KAAA;UACA;QACA;QACAS,MAAA,GACA;UACArC,IAAA;UACAsC,IAAA;UACAC,KAAA;UACAC,MAAA;UACAV,IAAA;UACAC,GAAA;UACAU,OAAA;UACAC,OAAA;UACAC,IAAA;UACAC,GAAA;UACAC,KAAA;YACAC,IAAA;YACAC,QAAA;YACAb,SAAA;YACAL,QAAA;YACAmB,UAAA;YACApB,KAAA;UACA;UACAqB,SAAA;YACAb,WAAA;YACAc,WAAA;UACA;UACAC,QAAA;YACAN,KAAA;cACAhB,QAAA;YACA;YACAoB,SAAA;cACAG,UAAA;cACAC,aAAA;cACAC,WAAA;YACA;UACA;UACArD,IAAA,EAAAA;QACA,EACA;QACA2B,KAAA;MACA;MAEA,KAAA1B,KAAA,CAAAqD,SAAA,CAAA/B,MAAA;IACA;IACAV,aAAA;MACA,SAAAZ,KAAA;QACA,KAAAA,KAAA,CAAAsD,MAAA;;QAEA;QACA,MAAAC,cAAA,QAAAlC,KAAA,CAAArB,KAAA,CAAAwD,WAAA;QACA,IAAAD,cAAA;UACA,KAAAvD,KAAA,CAAAqD,SAAA;YACAlB,MAAA;cACAE,KAAA;cACAT,IAAA;cACAe,KAAA;gBACAhB,QAAA;cACA;YACA;UACA;QACA;UACA,KAAA3B,KAAA,CAAAqD,SAAA;YACAlB,MAAA;cACAE,KAAA;cACAT,IAAA;cACAe,KAAA;gBACAhB,QAAA;cACA;YACA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}